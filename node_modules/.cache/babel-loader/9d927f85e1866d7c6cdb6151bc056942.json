{"ast":null,"code":"// import React from \"react\";\n// import { Switch, Route, Redirect } from \"react-router-dom\";\n// // creates a beautiful scrollbar\n// import PerfectScrollbar from \"perfect-scrollbar\";\n// import \"perfect-scrollbar/css/perfect-scrollbar.css\";\n// // @material-ui/core components\n// import { makeStyles } from \"@material-ui/core/styles\";\n// // core components\n// import Navbar from \"components/Navbars/Navbar.js\";\n// import Footer from \"components/Footer/Footer.js\";\n// import Sidebar from \"components/Sidebar/Sidebar.js\";\n// import FixedPlugin from \"components/FixedPlugin/FixedPlugin.js\";\n// import sellerroutes from \"sellerRoute\";\n// import styles from \"assets/jss/material-dashboard-react/layouts/adminStyle.js\";\n// import bgImage from \"assets/img/sidebar-2.jpg\";\n// let ps;\n// const switchRoutes = (\n//   <Switch>\n//     {sellerroutes.map((prop, key) => {\n//       if (prop.layout === \"/store\") {\n//         return (\n//           <Route\n//             path={prop.layout + prop.path}\n//             component={prop.component}\n//             key={key}\n//           />\n//         );\n//       }\n//       return null;\n//     })}\n//     <Redirect from=\"/store\" to=\"/store/dashboard\" />\n//   </Switch>\n// );\n// const useStyles = makeStyles(styles);\n// export default function Store({ ...rest }) {\n//   // styles\n//   const classes = useStyles();\n//   const mainPanel = React.createRef();\n//   const [image, setImage] = React.useState(bgImage);\n//   const [color, setColor] = React.useState(\"blue\");\n//   const [fixedClasses, setFixedClasses] = React.useState(\"dropdown\");\n//   const [mobileOpen, setMobileOpen] = React.useState(false);\n//   const handleImageClick = image => {\n//     setImage(image);\n//   };\n//   const handleColorClick = color => {\n//     setColor(color);\n//   };\n//   const handleFixedClick = () => {\n//     if (fixedClasses === \"dropdown\") {\n//       setFixedClasses(\"dropdown show\");\n//     } else {\n//       setFixedClasses(\"dropdown\");\n//     }\n//   };\n//   const handleDrawerToggle = () => {\n//     setMobileOpen(!mobileOpen);\n//   };\n//   const getRoute = () => {\n//     return window.location.pathname !== \"/admin/maps\";\n//   };\n//   const resizeFunction = () => {\n//     if (window.innerWidth >= 960) {\n//       setMobileOpen(false);\n//     }\n//   };\n//   // initialize and destroy the PerfectScrollbar plugin\n//   React.useEffect(() => {\n//     if (navigator.platform.indexOf(\"Win\") > -1) {\n//       ps = new PerfectScrollbar(mainPanel.current, {\n//         suppressScrollX: true,\n//         suppressScrollY: false\n//       });\n//       document.body.style.overflow = \"hidden\";\n//     }\n//     window.addEventListener(\"resize\", resizeFunction);\n//     // Specify how to clean up after this effect:\n//     return function cleanup() {\n//       if (navigator.platform.indexOf(\"Win\") > -1) {\n//         ps.destroy();\n//       }\n//       window.removeEventListener(\"resize\", resizeFunction);\n//     };\n//   }, [mainPanel]);\n//   return (\n//     <div className={classes.wrapper}>\n//       <Sidebar\n//         routes={sellerroutes}\n//         image={image}\n//         handleDrawerToggle={handleDrawerToggle}\n//         open={mobileOpen}\n//         color={color}\n//         {...rest}\n//       />\n//       <div className={classes.mainPanel} ref={mainPanel}>\n//         <Navbar\n//           routes={sellerroutes}\n//           handleDrawerToggle={handleDrawerToggle}\n//           {...rest}\n//         />\n//         {/* On the /maps route we want the map to be on full screen - this is not possible if the content and conatiner classes are present because they have some paddings which would make the map smaller */}\n//         {getRoute() ? (\n//           <div className={classes.content}>\n//             <div className={classes.container}>{switchRoutes}</div>\n//           </div>\n//         ) : (\n//           <div className={classes.map}>{switchRoutes}</div>\n//         )}\n//         {getRoute() ? <Footer /> : null}\n//         <FixedPlugin\n//           handleImageClick={handleImageClick}\n//           handleColorClick={handleColorClick}\n//           bgColor={color}\n//           bgImage={image}\n//           handleFixedClick={handleFixedClick}\n//           fixedClasses={fixedClasses}\n//         />\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"sources":["D:/Petexo Working/Petexo/Petexo/src/layouts/Store.js"],"names":[],"mappingssourcesContent":["// import React from \"react\";\r\n// import { Switch, Route, Redirect } from \"react-router-dom\";\r\n// // creates a beautiful scrollbar\r\n// import PerfectScrollbar from \"perfect-scrollbar\";\r\n// import \"perfect-scrollbar/css/perfect-scrollbar.css\";\r\n// // @material-ui/core components\r\n// import { makeStyles } from \"@material-ui/core/styles\";\r\n// // core components\r\n// import Navbar from \"components/Navbars/Navbar.js\";\r\n// import Footer from \"components/Footer/Footer.js\";\r\n// import Sidebar from \"components/Sidebar/Sidebar.js\";\r\n// import FixedPlugin from \"components/FixedPlugin/FixedPlugin.js\";\r\n\r\n// import sellerroutes from \"sellerRoute\";\r\n\r\n// import styles from \"assets/jss/material-dashboard-react/layouts/adminStyle.js\";\r\n\r\n// import bgImage from \"assets/img/sidebar-2.jpg\";\r\n\r\n\r\n// let ps;\r\n\r\n// const switchRoutes = (\r\n//   <Switch>\r\n//     {sellerroutes.map((prop, key) => {\r\n//       if (prop.layout === \"/store\") {\r\n//         return (\r\n//           <Route\r\n//             path={prop.layout + prop.path}\r\n//             component={prop.component}\r\n//             key={key}\r\n//           />\r\n//         );\r\n//       }\r\n//       return null;\r\n//     })}\r\n//     <Redirect from=\"/store\" to=\"/store/dashboard\" />\r\n//   </Switch>\r\n// );\r\n\r\n// const useStyles = makeStyles(styles);\r\n\r\n// export default function Store({ ...rest }) {\r\n//   // styles\r\n//   const classes = useStyles();\r\n  \r\n//   const mainPanel = React.createRef();\r\n  \r\n//   const [image, setImage] = React.useState(bgImage);\r\n//   const [color, setColor] = React.useState(\"blue\");\r\n \r\n//   const [fixedClasses, setFixedClasses] = React.useState(\"dropdown\");\r\n//   const [mobileOpen, setMobileOpen] = React.useState(false);\r\n//   const handleImageClick = image => {\r\n//     setImage(image);\r\n//   };\r\n//   const handleColorClick = color => {\r\n//     setColor(color);\r\n//   };\r\n//   const handleFixedClick = () => {\r\n//     if (fixedClasses === \"dropdown\") {\r\n//       setFixedClasses(\"dropdown show\");\r\n//     } else {\r\n//       setFixedClasses(\"dropdown\");\r\n//     }\r\n//   };\r\n//   const handleDrawerToggle = () => {\r\n//     setMobileOpen(!mobileOpen);\r\n//   };\r\n//   const getRoute = () => {\r\n//     return window.location.pathname !== \"/admin/maps\";\r\n//   };\r\n//   const resizeFunction = () => {\r\n//     if (window.innerWidth >= 960) {\r\n//       setMobileOpen(false);\r\n//     }\r\n//   };\r\n//   // initialize and destroy the PerfectScrollbar plugin\r\n//   React.useEffect(() => {\r\n//     if (navigator.platform.indexOf(\"Win\") > -1) {\r\n//       ps = new PerfectScrollbar(mainPanel.current, {\r\n//         suppressScrollX: true,\r\n//         suppressScrollY: false\r\n//       });\r\n//       document.body.style.overflow = \"hidden\";\r\n//     }\r\n//     window.addEventListener(\"resize\", resizeFunction);\r\n//     // Specify how to clean up after this effect:\r\n//     return function cleanup() {\r\n//       if (navigator.platform.indexOf(\"Win\") > -1) {\r\n//         ps.destroy();\r\n//       }\r\n//       window.removeEventListener(\"resize\", resizeFunction);\r\n//     };\r\n//   }, [mainPanel]);\r\n//   return (\r\n//     <div className={classes.wrapper}>\r\n//       <Sidebar\r\n//         routes={sellerroutes}\r\n//         image={image}\r\n//         handleDrawerToggle={handleDrawerToggle}\r\n//         open={mobileOpen}\r\n//         color={color}\r\n//         {...rest}\r\n//       />\r\n//       <div className={classes.mainPanel} ref={mainPanel}>\r\n//         <Navbar\r\n//           routes={sellerroutes}\r\n//           handleDrawerToggle={handleDrawerToggle}\r\n//           {...rest}\r\n//         />\r\n//         {/* On the /maps route we want the map to be on full screen - this is not possible if the content and conatiner classes are present because they have some paddings which would make the map smaller */}\r\n//         {getRoute() ? (\r\n//           <div className={classes.content}>\r\n//             <div className={classes.container}>{switchRoutes}</div>\r\n//           </div>\r\n//         ) : (\r\n//           <div className={classes.map}>{switchRoutes}</div>\r\n//         )}\r\n//         {getRoute() ? <Footer /> : null}\r\n//         <FixedPlugin\r\n//           handleImageClick={handleImageClick}\r\n//           handleColorClick={handleColorClick}\r\n//           bgColor={color}\r\n//           bgImage={image}\r\n//           handleFixedClick={handleFixedClick}\r\n//           fixedClasses={fixedClasses}\r\n//         />\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}